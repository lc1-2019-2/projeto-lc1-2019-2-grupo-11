(radix_sort
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3780246306
   ("" (use "permutations_is_transitive[T]")
    (("" (expand radixsort)
      (("" (skeep)
        (("" (use "merge_sort_is_permutation[T, <<]")
          (("" (use "merge_sort_is_permutation[T, <=]")
            ((""
              (inst-cp -3 "merge_sort[T, <<](merge_sort[T, <=](l))"
               "merge_sort[T, <=](l)" "l")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((radixsort const-decl "list[T]" radix_sort nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil))
   shostak))
 (lex_is_total_preorder 0
  (lex_is_total_preorder-1 nil 3780675846
   ("" (typepred <<)
    (("" (typepred <=)
      (("" (expand total_preorder?)
        (("" (expand preorder?)
          (("" (flatten)
            (("" (split)
              (("1" (hide -2 -3 -5 -6)
                (("1" (expand reflexive?)
                  (("1" (skeep)
                    (("1" (inst - "x")
                      (("1" (inst - "x")
                        (("1" (expand lex) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 -4 -6)
                (("2" (expand transitive?)
                  (("2" (skeep)
                    (("2" (expand lex)
                      (("2" (inst-cp -3 "x" "y" "z")
                        (("2" (inst-cp -5 "x" "y" "z")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (inst -6 "z" "x" "y")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst -6 "z" "x" "y")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (inst -8 "y" "z" "x")
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (inst -8 "z" "x" "y")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 -2 -4 -5)
                (("3" (expand dichotomous?)
                  (("3" (skeep)
                    (("3" (inst - "x" "y")
                      (("3" (inst - "x" "y")
                        (("3" (expand lex)
                          (("3" (assert)
                            (("3" (flatten) (("3" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil radix_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dichotomous? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (lex const-decl "bool" radix_sort nil)
    (reflexive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   shostak))
 (radixsort_sorts_TCC1 0
  (radixsort_sorts_TCC1-1 nil 3777655189
   ("" (typepred "<<" "<=")
    (("" (expand "total_preorder?")
      (("" (expand "preorder?")
        (("" (prop)
          (("1" (hide -2 -3 -5 -6) (("1" (grind) nil nil)) nil)
           ("2" (expand "lex")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (copy -4)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -6)
                                  (("1"
                                    (inst -6 "y_1" "z" "x_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (copy -6)
                            (("2" (expand "transitive?" -1)
                              (("2"
                                (inst -1 "x_1" "y_1" "z")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "transitive?" -8)
                                    (("2"
                                      (inst -8 "y_1" "z" "x_1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (copy -6)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -8)
                                  (("1"
                                    (inst -8 "z" "x_1" "y_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (copy -8)
                        (("2" (expand "transitive?" -1)
                          (("2" (inst -1 "x_1" "y_1" "z")
                            (("2" (assert)
                              (("2"
                                (expand "transitive?" -13)
                                (("2"
                                  (inst -13 "x_1" "y_1" "z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "lex")
            (("3" (expand "dichotomous?" 1)
              (("3" (skeep)
                (("3" (hide -2 -5)
                  (("3" (copy -2)
                    (("3" (copy -5)
                      (("3" (expand "dichotomous?" -2)
                        (("3" (inst?)
                          (("3" (prop)
                            (("1" (expand "dichotomous?" -4)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "dichotomous?" -4)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex const-decl "bool" radix_sort nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   nil))
 (radixsort_sorts 1
  (radixsort_sorts-3 "loucura" 3780333283
   ("" (measure-induct "length(l)" "l")
    (("1" (skeep)
      (("1" (expand radixsort 1)
        (("1" (use "merge_sort_is_sorted[T, <<]")
          (("1" (use "merge_sort_is_sorted[T, <=]")
            (("1" (assert)
              (("1" (expand is_sorted?)
                (("1" (skeep)
                  (("1" (inst - "k")
                    (("1" (inst - "k")
                      (("1" (expand lex)
                        (("1" (assert) (("1" (postpone) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep) (("2" (postpone) nil nil)) nil))
    nil)
   nil shostak)
  (radixsort_sorts-2 "backup" 3780332086
   ("" (measure-induct "length(l)" "l")
    (("1" (skeep) (("1" (postpone) nil nil)) nil)
     ("2" (skeep)
      (("2" (assert)
        (("2" (expand "total_preorder?")
          (("2" (expand "preorder?")
            (("2" (split)
              (("1" (postpone) nil nil)
               ("2" (typepred <<)
                (("2" (typepred <=)
                  (("2" (expand total_preorder?)
                    (("2" (expand preorder?)
                      (("2" (flatten)
                        (("2" (expand transitive?)
                          (("2" (hide -1 -3 -4 -6)
                            (("2" (skeep)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand lex)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1" (postpone) nil nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil)
                                       ("4" (postpone) nil nil)
                                       ("5" (postpone) nil nil)
                                       ("6" (postpone) nil nil)
                                       ("7" (postpone) nil nil)
                                       ("8" (postpone) nil nil)
                                       ("9" (postpone) nil nil)
                                       ("10" (postpone) nil nil)
                                       ("11" (postpone) nil nil)
                                       ("12" (postpone) nil nil)
                                       ("13" (postpone) nil nil)
                                       ("14" (postpone) nil nil)
                                       ("15" (postpone) nil nil)
                                       ("16" (postpone) nil nil)
                                       ("17" (postpone) nil nil)
                                       ("18" (postpone) nil nil)
                                       ("19" (postpone) nil nil)
                                       ("20" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (radixsort_sorts-1 nil 3780245582
   ("" (measure-induct "length(l)" "l")
    (("1" (skeep) (("1" (postpone) nil nil)) nil)
     ("2" (skeep) (("2" (postpone) nil nil)) nil))
    nil)
   nil shostak)))


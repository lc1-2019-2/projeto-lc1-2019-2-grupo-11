(radix_sort
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3780246306
   ("" (use "permutations_is_transitive[T]")
    (("" (expand radixsort)
      (("" (skeep)
        (("" (use "merge_sort_is_permutation[T, <<]")
          (("" (use "merge_sort_is_permutation[T, <=]")
            ((""
              (inst-cp -3 "merge_sort[T, <<](merge_sort[T, <=](l))"
               "merge_sort[T, <=](l)" "l")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((radixsort const-decl "list[T]" radix_sort nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (T formal-type-decl nil radix_sort nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil))
   shostak))
 (lex_is_total_preorder 0
  (lex_is_total_preorder-1 nil 3780675846
   ("" (typepred <<)
    (("" (typepred <=)
      (("" (expand total_preorder?)
        (("" (expand preorder?)
          (("" (flatten)
            (("" (split)
              (("1" (hide -2 -3 -5 -6)
                (("1" (expand reflexive?)
                  (("1" (skeep)
                    (("1" (inst - "x")
                      (("1" (inst - "x")
                        (("1" (expand lex) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -3 -4 -6)
                (("2" (expand transitive?)
                  (("2" (skeep)
                    (("2" (expand lex)
                      (("2" (inst-cp -3 "x" "y" "z")
                        (("2" (inst-cp -5 "x" "y" "z")
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (inst -6 "z" "x" "y")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst -6 "z" "x" "y")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (inst -8 "y" "z" "x")
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (inst -8 "z" "x" "y")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1 -2 -4 -5)
                (("3" (expand dichotomous?)
                  (("3" (skeep)
                    (("3" (inst - "x" "y")
                      (("3" (inst - "x" "y")
                        (("3" (expand lex)
                          (("3" (assert)
                            (("3" (flatten) (("3" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (preorder? const-decl "bool" orders nil)
    (reflexive? const-decl "bool" relations nil)
    (lex const-decl "bool" radix_sort nil)
    (transitive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil))
   shostak))
 (radixsort_sorts_TCC1 0
  (radixsort_sorts_TCC1-1 nil 3781217041 ("" (subtype-tcc) nil nil) nil
   nil))
 (radixsort_sorts 0
  (radixsort_sorts-1 nil 3781217073
   ("" (skeep)
    (("" (expand radixsort)
      (("" (expand is_sorted?)
        (("" (skeep)
          (("" (lemma "merge_sort_is_sorted[T, <<]")
            (("" (inst -1 "merge_sort[T, <=](l)")
              (("" (expand is_sorted?)
                (("" (inst -1 "k")
                  (("" (assert)
                    (("" (expand lex)
                      (("" (assert)
                        (("" (prop)
                          ((""
                            (lemma "merge_sort_is_conservative[T, <<]")
                            ((""
                              (inst -1 "merge_sort[T, <=](l)" "k"
                               "1 + k")
                              ((""
                                (assert)
                                ((""
                                  (skeep)
                                  ((""
                                    (hide -4 -6)
                                    ((""
                                      (replace -2)
                                      ((""
                                        (replace -3)
                                        ((""
                                          (lemma
                                           "merge_sort_is_sorted[T, <=]")
                                          ((""
                                            (inst -1 "l")
                                            ((""
                                              (lemma
                                               "is_sorted_implies_monotone[T, <=]")
                                              ((""
                                                (inst
                                                 -1
                                                 "merge_sort[T, <=](l)")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (inst -1 "j" "i")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((radixsort const-decl "list[T]" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (lex const-decl "bool" radix_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (is_sorted_implies_monotone formula-decl nil sorting nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (merge_sort_is_conservative formula-decl nil mergesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (merge_sort_is_sorted formula-decl nil mergesort nil)
    (T formal-type-decl nil radix_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (is_sorted? const-decl "bool" sorting nil))
   shostak)))

